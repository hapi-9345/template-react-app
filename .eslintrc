{
  "env": {
    "browser": true,
    "node": true,
    "commonjs": false,
    "shared-node-browser": false,
    "es6": false,
    "es2016": false,
    "es2017": false,
    "es2018": false,
    "es2019": false,
    "es2020": false,
    "es2021": true,
    "es2022": false,
    "worker": false,
    "amd": false,
    "mocha": false,
    "jasmine": false,
    "jest": false,
    "phantomjs": false,
    "protractor": false,
    "qunit": false,
    "jquery": false,
    "prototypejs": false,
    "shelljs": false,
    "meteor": false,
    "mongo": false,
    "applescript": false,
    "nashorn": false,
    "serviceworker": false,
    "atomtest": false,
    "embertest": false,
    "webextensions": false,
    "greasemonkey": false
  },
  "extends": [
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "globals": {},
  "noInlineConfig": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "allowReserved": false,
    "ecmaFeatures": {
      "globalReturn": false,
      "impliedStrict": false,
      "jsx": true
    }
  },
  "plugins": [
    "@stylistic/eslint-plugin-js",
    "prettier",
    "react",
    "react-hooks",
    "import",
    "unused-imports",
    "licenses"
  ],
  "root": true,
  "ignorePatterns": [
    "node_modules",
    "dist",
    ".vscode",
    ".idea",
    ".git"
  ],
  "rules": {
    "prettier/prettier": [
      "error"
    ],
    "licenses/header": [
      "error",
      {
        "comment": "block",
        "header": [
          "\nCopyright Fedyakov Mikhail  {YEAR}\n"
        ]
      }
    ],
    "@typescript-eslint/block-spacing": [
      "error",
      "always"
    ],
    "@typescript-eslint/brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": false
      }
    ],
    "@typescript-eslint/comma-dangle": [
      "error",
      {
        "arrays": "never",
        "objects": "never",
        "imports": "never",
        "exports": "never",
        "functions": "never"
      }
    ],
    "@typescript-eslint/comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "@typescript-eslint/func-call-spacing": [
      "error",
      "never"
    ],
    "@typescript-eslint/indent": [
      "error",
      "tab",
      {
        "ignoredNodes": [
          "ConditionalExpression",
          "JSXElement",
          "JSXElement > *",
          "JSXAttribute",
          "JSXIdentifier",
          "JSXNamespacedName",
          "JSXMemberExpression",
          "JSXSpreadAttribute",
          "JSXExpressionContainer",
          "JSXOpeningElement",
          "JSXClosingElement",
          "JSXText",
          "JSXEmptyExpression",
          "JSXSpreadChild"
        ],
        "SwitchCase": 1,
        "VariableDeclarator": "first",
        "outerIIFEBody": 1,
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "parameters": "first",
          "body": 1
        },
        "StaticBlock": {
          "body": 1
        },
        "CallExpression": {
          "arguments": "first"
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "ImportDeclaration": 1,
        "flatTernaryExpressions": true,
        "offsetTernaryExpressions": true,
        "ignoreComments": true
      }
    ],
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/key-spacing": [
      "error",
      {
        "beforeColon": false,
        "afterColon": true,
        "mode": "strict"
      }
    ],
    "@typescript-eslint/keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    "@typescript-eslint/lines-around-comment": [
      "error",
      {
        "beforeBlockComment": false,
        "afterBlockComment": false,
        "beforeLineComment": false,
        "afterLineComment": false,
        "allowBlockStart": true,
        "allowBlockEnd": false,
        "allowClassStart": true,
        "allowClassEnd": false,
        "allowObjectStart": true,
        "allowObjectEnd": false,
        "allowArrayStart": true,
        "allowArrayEnd": false,
        "ignorePattern": "pragma",
        "applyDefaultIgnorePatterns": false
      }
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "none",
          "requireLast": false
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        },
        "multilineDetection": "brackets"
      }
    ],
    "@typescript-eslint/no-extra-parens": [
      "error",
      "all",
      {
        "conditionalAssign": false,
        "returnAssign": false,
        "nestedBinaryExpressions": false,
        "ignoreJSX": "multi-line",
        "enforceForArrowConditionals": false,
        "enforceForSequenceExpressions": false,
        "enforceForNewInMemberExpressions": false,
        "enforceForFunctionPrototypeMethods": false
      }
    ],
    "@typescript-eslint/object-curly-spacing": [
      "error",
      "always"
    ],
    "@typescript-eslint/padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let"
        ],
        "next": [
          "const",
          "let"
        ]
      },
      {
        "blankLine": "never",
        "prev": [
          "case",
          "default"
        ],
        "next": "*"
      }
    ],
    "@typescript-eslint/quotes": [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "@typescript-eslint/semi": [
      "error",
      "never",
      {
        "beforeStatementContinuationChars": "never"
      }
    ],
    "@typescript-eslint/space-before-blocks": [
      "error",
      "always"
    ],
    "@typescript-eslint/space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "@typescript-eslint/space-infix-ops": [
      "error",
      {
        "int32Hint": false
      }
    ],
    "@typescript-eslint/type-annotation-spacing": [
      "error",
      {
        "before": false,
        "after": true,
        "overrides": {
          "colon": {
            "before": false,
            "after": true
          },
          "arrow": {
            "before": true,
            "after": true
          },
          "variable": {
            "before": false,
            "after": true
          },
          "parameter": {
            "before": false,
            "after": true
          },
          "property": {
            "before": false,
            "after": true
          },
          "returnType": {
            "before": false,
            "after": true
          }
        }
      }
    ],
    "array-bracket-newline": [
      "error",
      "consistent"
    ],
    "array-bracket-spacing": [
      "error",
      "never",
      {
        "singleValue": false,
        "objectsInArrays": false,
        "arraysInArrays": false
      }
    ],
    "array-element-newline": [
      "error",
      "consistent"
    ],
    "arrow-parens": [
      "error",
      "always",
      {
        "requireForBlockBody": false
      }
    ],
    "arrow-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    "block-spacing": [
      "error",
      "always"
    ],
    "brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": false
      }
    ],
    "comma-dangle": [
      "error",
      {
        "arrays": "never",
        "objects": "never",
        "imports": "never",
        "exports": "never",
        "functions": "never"
      }
    ],
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "comma-style": [
      "error",
      "last"
    ],
    "computed-property-spacing": [
      "error",
      "never",
      {
        "enforceForClassMembers": true
      }
    ],
    "dot-location": [
      "error",
      "property"
    ],
    "eol-last": [
      "error",
      "always"
    ],
    "func-call-spacing": [
      "error",
      "never"
    ],
    "function-call-argument-newline": [
      "error",
      "consistent"
    ],
    "function-paren-newline": [
      "error",
      "consistent"
    ],
    "generator-star-spacing": [
      "error",
      {
        "before": false,
        "after": true,
        "anonymous": "neither",
        "method": {
          "before": true,
          "after": false
        }
      }
    ],
    "implicit-arrow-linebreak": [
      "error",
      "beside"
    ],
    "indent": [
      "error",
      "tab",
      {
        "ignoredNodes": [
          "ConditionalExpression",
          "JSXElement",
          "JSXElement > *",
          "JSXAttribute",
          "JSXIdentifier",
          "JSXNamespacedName",
          "JSXMemberExpression",
          "JSXSpreadAttribute",
          "JSXExpressionContainer",
          "JSXOpeningElement",
          "JSXClosingElement",
          "JSXText",
          "JSXEmptyExpression",
          "JSXSpreadChild"
        ],
        "SwitchCase": 1,
        "VariableDeclarator": "first",
        "outerIIFEBody": 1,
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "parameters": "first",
          "body": 1
        },
        "StaticBlock": {
          "body": 1
        },
        "CallExpression": {
          "arguments": "first"
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "ImportDeclaration": 1,
        "flatTernaryExpressions": true,
        "offsetTernaryExpressions": true,
        "ignoreComments": true
      }
    ],
    "jsx-quotes": [
      "error",
      "prefer-double"
    ],
    "key-spacing": [
      "error",
      {
        "beforeColon": false,
        "afterColon": true,
        "mode": "strict"
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    "line-comment-position": [
      "off"
      //      {
      //        "position": "beside",
      //        "ignorePattern": "pragma",
      //        "applyDefaultIgnorePatterns": false
      //      }
    ],
    "lines-around-comment": [
      "error",
      {
        "beforeBlockComment": false,
        "afterBlockComment": false,
        "beforeLineComment": false,
        "afterLineComment": false,
        "allowBlockStart": true,
        "allowBlockEnd": false,
        "allowClassStart": true,
        "allowClassEnd": false,
        "allowObjectStart": true,
        "allowObjectEnd": false,
        "allowArrayStart": true,
        "allowArrayEnd": false,
        "ignorePattern": "pragma",
        "applyDefaultIgnorePatterns": false
      }
    ],
    "max-len": [
      "error",
      {
        "code": 180,
        "tabWidth": 4,
        "comments": 180,
        "ignoreComments": true,
        "ignoreTrailingComments": true,
        "ignoreUrls": true,
        "ignoreStrings": false,
        "ignoreTemplateLiterals": false,
        "ignoreRegExpLiterals": true
      }
    ],
    "max-statements-per-line": [
      "error",
      {
        "max": 1
      }
    ],
    /*
      правило изменяет внешний вид JSX, запрещено включать
      "multiline-ternary": [
        "error",
        "never"
      ],
    */
    "new-parens": [
      "error",
      "never"
    ],
    "newline-per-chained-call": [
      "error",
      {
        "ignoreChainWithDepth": 5
      }
    ],
    "no-extra-parens": [
      "error",
      "all",
      {
        "conditionalAssign": false,
        "returnAssign": false,
        "nestedBinaryExpressions": false,
        "ignoreJSX": "multi-line",
        "enforceForArrowConditionals": false,
        "enforceForSequenceExpressions": false,
        "enforceForNewInMemberExpressions": false,
        "enforceForFunctionPrototypeMethods": false
      }
    ],
    "no-mixed-spaces-and-tabs": [
      "error",
      "smart-tabs"
    ],
    "no-multi-spaces": [
      "error",
      {
        "ignoreEOLComments": false,
        "exceptions": {
          "Property": false
        }
      }
    ],
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1,
        "maxEOF": 1,
        "maxBOF": 0
      }
    ],
    /*
      правило изменяет внешний вид JSX и выдает ошибки отступов (не совместимо с ident), запрещено включать
       "no-tabs": [
          "error",
          {
            "allowIndentationTabs": false
          }
       ],
    */
    "no-whitespace-before-property": [
      "error"
    ],
    "nonblock-statement-body-position": [
      "error",
      "beside"
    ],
    "object-curly-newline": [
      "error",
      {
        "consistent": true,
        "minProperties": 10
      }
    ],
    "object-curly-spacing": [
      "error",
      "always"
    ],
    "object-property-newline": [
      "error",
      {
        "allowAllPropertiesOnSameLine": true
      }
    ],
    "operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          "?": "before",
          ":": "before"
        }
      }
    ],
    "padded-blocks": [
      "error",
      "never"
    ],
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let"
        ],
        "next": [
          "const",
          "let"
        ]
      },
      {
        "blankLine": "never",
        "prev": [
          "case",
          "default"
        ],
        "next": "*"
      }
    ],
    "quotes": [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "rest-spread-spacing": [
      "error",
      "never"
    ],
    "semi": [
      "error",
      "never",
      {
        "beforeStatementContinuationChars": "never"
      }
    ],
    "semi-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "semi-style": [
      "error",
      "last"
    ],
    "space-before-blocks": [
      "error",
      "always"
    ],
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-in-parens": [
      "error",
      "never"
    ],
    "space-infix-ops": [
      "error",
      {
        "int32Hint": false
      }
    ],
    "space-unary-ops": [
      "error",
      {
        "words": true,
        "nonwords": false
      }
    ],
    "switch-colon-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "template-curly-spacing": [
      "error",
      "never"
    ],
    "template-tag-spacing": [
      "error",
      "always"
    ],
    "unicode-bom": [
      "error",
      "never"
    ],
    "wrap-iife": [
      "error",
      "outside"
    ],
    "wrap-regex": [
      "error"
    ],
    "yield-star-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "eslint constructor-super": [
      "off"
    ],
    "for-direction": [
      "error"
    ],
    "getter-return": [
      "error",
      {
        "allowImplicit": false
      }
    ],
    "no-async-promise-executor": [
      "error"
    ],
    "no-await-in-loop": [
      "error"
    ],
    "no-class-assign": [
      "error"
    ],
    "no-compare-neg-zero": [
      "error"
    ],
    "no-cond-assign": [
      "error",
      "except-parens"
    ],
    "no-const-assign": [
      "error"
    ],
    "no-constant-binary-expression": [
      "error"
    ],
    "no-constructor-return": [
      "error"
    ],
    "no-control-regex": [
      "error"
    ],
    "no-debugger": [
      "error"
    ],
    "no-dupe-args": [
      "error"
    ],
    "no-dupe-class-members": [
      "error"
    ],
    "no-dupe-else-if": [
      "error"
    ],
    "no-dupe-keys": [
      "error"
    ],
    "no-duplicate-case": [
      "error"
    ],
    "no-duplicate-imports": [
      "error"
    ],
    "no-empty-character-class": [
      "error"
    ],
    "no-empty-pattern": [
      "error"
    ],
    "no-ex-assign": [
      "error"
    ],
    "no-fallthrough": [
      "error"
    ],
    "no-func-assign": [
      "error"
    ],
    "no-import-assign": [
      "error"
    ],
    "no-inner-declarations": [
      "error"
    ],
    "no-invalid-regexp": [
      "error"
    ],
    "no-irregular-whitespace": [
      "error"
    ],
    "no-loss-of-precision": [
      "error"
    ],
    "no-misleading-character-class": [
      "error"
    ],
    "no-new-symbol": [
      "error"
    ],
    "no-obj-calls": [
      "error"
    ],
    "no-promise-executor-return": [
      "error"
    ],
    /* правило хорошее, но пока отключим, так как из-за особенностей бэка мы не может точно знать что придет в объекте */
    "no-prototype-builtins": [
      "off"
    ],
    "no-self-assign": [
      "error"
    ],
    "no-self-compare": [
      "error"
    ],
    "no-setter-return": [
      "error"
    ],
    "no-sparse-arrays": [
      "error"
    ],
    "no-template-curly-in-string": [
      "error"
    ],
    "no-this-before-super": [
      "error"
    ],
    "no-undef": [
      "error"
    ],
    "no-unexpected-multiline": [
      "error"
    ],
    "no-unmodified-loop-condition": [
      "error"
    ],
    "no-unreachable": [
      "error"
    ],
    "no-unreachable-loop": [
      "error",
      {
        "ignore": []
      }
    ],
    "no-unsafe-finally": [
      "error"
    ],
    "no-unsafe-negation": [
      "error",
      {
        "enforceForOrderingRelations": true
      }
    ],
    "no-unused-private-class-members": [
      "error"
    ],
    "no-useless-backreference": [
      "error"
    ],
    "require-atomic-updates": [
      "error",
      {
        "allowProperties": false
      }
    ],
    "use-isnan": [
      "error",
      {
        "enforceForSwitchCase": true,
        "enforceForIndexOf": true
      }
    ],
    "valid-typeof": [
      "error",
      {
        "requireStringLiterals": true
      }
    ],
    /* Начинаются правила для предложений по написанию JS кода */
    "accessor-pairs": [
      "error",
      {
        "setWithoutGet": true,
        "getWithoutSet": true,
        "enforceForClassMembers": true
      }
    ],
    /* правило хорошее, но пока отключим, так как мало настраиваемое */
    "arrow-body-style": [
      "off"
    ],
    "block-scoped-var": [
      "error"
    ],
    "camelcase": [
      "error",
      {
        "properties": "never",
        "ignoreDestructuring": false,
        "ignoreImports": false,
        "ignoreGlobals": false,
        "allow": []
      }
    ],
    "capitalized-comments": [
      "off"
    ],
    /* правило хорошее, но пока отключим, так как не совсем понятно применение в проекте */
    "class-methods-use-this": [
      "off"
    ],
    /* правило хорошее, но пока отключим, так как проект в текущей реализации слишком сложный */
    "complexity": [
      "off"
    ],
    "consistent-return": [
      "error",
      {
        /* нужно проверить */
        "treatUndefinedAsUnspecified": false
      }
    ],
    "consistent-this": [
      "off"
    ],
    "curly": [
      "error",
      "all"
    ],
    "default-case": [
      "error"
    ],
    "default-case-last": [
      "error"
    ],
    "default-param-last": [
      "off"
    ],
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "always"
      }
    ],
    "func-name-matching": [
      "off"
    ],
    "func-names": [
      "off"
    ],
    /* правило не дружит с генераторами, запрещено включать */
    "func-style": [
      "off"
    ],
    "grouped-accessor-pairs": [
      "error",
      "anyOrder"
    ],
    /* правило хорошее, но пока отключим, так как в текущей реализации имеем вопросы касательно применения hasOwnProperty */
    "guard-for-in": [
      "off"
    ],
    "id-denylist": [
      "error",
      "err",
      "e"
    ],
    "id-length": [
      "off"
    ],
    "id-match": [
      "off"
    ],
    "init-declarations": [
      "error",
      "always"
    ],
    "logical-assignment-operators": [
      "off"
    ],
    "max-classes-per-file": [
      "error",
      {
        "ignoreExpressions": true,
        "max": 1
      }
    ],
    "max-depth": [
      "off"
    ],
    "max-lines": [
      "off"
    ],
    "max-lines-per-function": [
      "off"
    ],
    "max-nested-callbacks": [
      "off"
    ],
    "max-params": [
      "off"
    ],
    "max-statements": [
      "off"
    ],
    "multiline-comment-style": [
      "error",
      "bare-block"
    ],
    "new-cap": [
      "error",
      {
        "newIsCap": true,
        "capIsNew": false,
        "properties": true
      }
    ],
    "no-alert": [
      "error"
    ],
    "no-array-constructor": [
      "error"
    ],
    "no-bitwise": [
      "error"
    ],
    "no-caller": [
      "error"
    ],
    "no-case-declarations": [
      "error"
    ],
    "no-confusing-arrow": [
      "error",
      {
        "allowParens": true,
        "onlyOneSimpleParam": true
      }
    ],
    "no-console": [
      "error"
    ],
    "no-delete-var": [
      "error"
    ],
    "no-div-regex": [
      "error"
    ],
    "no-else-return": [
      "error",
      {
        "allowElseIf": false
      }
    ],
    "no-empty": [
      "error",
      {
        "allowEmptyCatch": false
      }
    ],
    "no-empty-static-block": [
      "error"
    ],
    "no-eq-null": [
      "error"
    ],
    "@typescript-eslint/ban-ts-comment": "off",
    "no-eval": [
      "error",
      {
        "allowIndirect": false
      }
    ],
    "no-extend-native": [
      "error",
      {
        "exceptions": []
      }
    ],
    "no-extra-bind": [
      "error"
    ],
    "no-extra-boolean-cast": [
      "error",
      {
        "enforceForLogicalOperands": true
      }
    ],
    "no-extra-label": [
      "error"
    ],
    "no-extra-semi": [
      "error"
    ],
    "no-floating-decimal": [
      "error"
    ],
    "no-global-assign": [
      "error",
      {
        "exceptions": []
      }
    ],
    "no-implicit-coercion": [
      "off"
    ],
    "no-implicit-globals": [
      "error"
    ],
    "no-implied-eval": [
      "error"
    ],
    "no-inline-comments": [
      "off"
    ],
    "no-invalid-this": [
      "error",
      {
        "capIsConstructor": false
      }
    ],
    "no-iterator": [
      "error"
    ],
    "no-label-var": [
      "error"
    ],
    "no-labels": [
      "error",
      {
        "allowLoop": false,
        "allowSwitch": false
      }
    ],
    "no-lone-blocks": [
      "error"
    ],
    "no-lonely-if": [
      "error"
    ],
    "no-loop-func": [
      "error"
    ],
    /* правило отключим так как оно помечает дефолтные числовые значения в lodash */
    "no-magic-numbers": [
      "off"
    ],
    "no-multi-assign": [
      "error",
      {
        "ignoreNonDeclaration": false
      }
    ],
    "no-multi-str": [
      "error"
    ],
    "no-negated-condition": [
      "error"
    ],
    /* правило изменяет внешний вид JSX и выдает ошибки условного рендеринга, запрещено включать */
    "no-nested-ternary": [
      "off"
    ],
    "no-new": [
      "error"
    ],
    "no-new-func": [
      "error"
    ],
    "no-new-object": [
      "error"
    ],
    "no-new-wrappers": [
      "error"
    ],
    "no-nonoctal-decimal-escape": [
      "error"
    ],
    "no-octal": [
      "error"
    ],
    "no-octal-escape": [
      "error"
    ],
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    "no-proto": [
      "error"
    ],
    "no-redeclare": [
      "error",
      {
        "builtinGlobals": true
      }
    ],
    "no-regex-spaces": [
      "error"
    ],
    "no-restricted-exports": [
      "error",
      {
        "restrictedNamedExports": []
      }
    ],
    "no-restricted-globals": [
      "off"
    ],
    "no-restricted-imports": [
      "off"
    ],
    "no-restricted-properties": [
      "off"
    ],
    "no-restricted-syntax": [
      "off"
    ],
    "no-return-assign": [
      "error",
      "always"
    ],
    "no-return-await": [
      "error"
    ],
    "no-script-url": [
      "error"
    ],
    "no-sequences": [
      "off"
    ],
    "no-shadow": [
      "off"
    ],
    "no-shadow-restricted-names": [
      "error"
    ],
    "no-ternary": [
      "off"
    ],
    "no-throw-literal": [
      "error"
    ],
    "no-undef-init": [
      "error"
    ],
    "no-undefined": [
      "error"
    ],
    "no-underscore-dangle": [
      "error",
      {
        "allow": [],
        "allowAfterThis": false,
        "allowAfterSuper": false,
        "allowAfterThisConstructor": false,
        "enforceInMethodNames": false,
        "enforceInClassFields": false,
        "allowFunctionParams": false
      }
    ],
    "no-unneeded-ternary": [
      "off"
    ],
    "no-unused-expressions": [
      "off"
    ],
    "no-unused-labels": [
      "error"
    ],
    "no-useless-call": [
      "error"
    ],
    "no-useless-catch": [
      "error"
    ],
    "no-useless-computed-key": [
      "error",
      {
        "enforceForClassMembers": true
      }
    ],
    "no-useless-concat": [
      "error"
    ],
    "no-useless-escape": [
      "error"
    ],
    "no-useless-rename": [
      "error",
      {
        "ignoreDestructuring": false,
        "ignoreImport": false,
        "ignoreExport": false
      }
    ],
    "no-var": [
      "error"
    ],
    "no-void": [
      "error"
    ],
    "no-warning-comments": [
      "error",
      {
        "terms": [
          "todo"
        ],
        "location": "start"
      }
    ],
    "no-with": [
      "error"
    ],
    "object-shorthand": [
      "error",
      "never"
    ],
    "one-var": [
      "error",
      "never"
    ],
    "one-var-declaration-per-line": [
      "error",
      "always"
    ],
    "operator-assignment": [
      "error",
      "always"
    ],
    "prefer-arrow-callback": [
      "error",
      {
        "allowNamedFunctions": false,
        "allowUnboundThis": false
      }
    ],
    "prefer-const": [
      "error",
      {
        "destructuring": "any",
        "ignoreReadBeforeAssign": false
      }
    ],
    "prefer-destructuring": [
      "error",
      {
        "array": false,
        "object": true
      },
      {
        "enforceForRenamedProperties": false
      }
    ],
    "prefer-exponentiation-operator": [
      "error"
    ],
    "prefer-named-capture-group": [
      "off"
    ],
    "prefer-numeric-literals": [
      "error"
    ],
    "prefer-object-has-own": [
      "error"
    ],
    "prefer-object-spread": [
      "error"
    ],
    "prefer-promise-reject-errors": [
      "error",
      {
        "allowEmptyReject": false
      }
    ],
    "prefer-regex-literals": [
      "error",
      {
        "disallowRedundantWrapping": true
      }
    ],
    "prefer-rest-params": [
      "error"
    ],
    "react-hooks/exhaustive-deps": "off",
    "prefer-spread": [
      "error"
    ],
    "prefer-template": [
      "error"
    ],
    "quote-props": [
      "error",
      "as-needed"
    ],
    "radix": [
      "error",
      "always"
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "require-await": [
      "error"
    ],
    "require-yield": [
      "error"
    ],
    /* правило отключим, так как используем плагин для сортировкм импортов */
    "sort-imports": [
      "off"
    ],
    "sort-keys": [
      "off"
    ],
    "sort-vars": [
      "off"
    ],
    /* правило интересное, но пока отключим, так как не совсем понятно как с этим работать */
    "spaced-comment": [
      "off"
    ],
    "strict": [
      "error",
      "never"
    ],
    "symbol-description": [
      "error"
    ],
    "vars-on-top": [
      "error"
    ],
    "yoda": [
      "error",
      "never",
      {
        "exceptRange": false,
        "onlyEquality": false
      }
    ],
    "react/prop-types": [
      "off"
    ],
    "import/no-namespace": [
      "off"
    ],
    "import/no-unresolved": [
      "off"
    ],
    "unused-imports/no-unused-imports": [
      "error",
      {
        "varsIgnorePattern": "React"
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react/destructuring-assignment": [
      "error",
      "always"
    ],
    "react/hook-use-state": [
      "error"
    ],
    "react/no-access-state-in-setstate": [
      "error"
    ],
    "react/no-array-index-key": [
      "error"
    ],
    "react/no-danger": [
      "off"
    ],
    "react/no-invalid-html-attribute": [
      "error"
    ],
    "react/no-multi-comp": [
      "error"
    ],
    "react/no-namespace": [
      "error"
    ],
    "react/no-this-in-sfc": [
      "error"
    ],
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    "react/style-prop-object": [
      "error"
    ],
    "react/void-dom-elements-no-children": [
      "error"
    ],
    /* следующий код это настройка ESlint правил для JSX разметки React */
    "react/jsx-boolean-value": [
      "error",
      "always"
    ],
    "react/jsx-child-element-spacing": [
      "off"
    ],
    "react/jsx-closing-bracket-location": [
      "error",
      "tag-aligned"
    ],
    "react/jsx-closing-tag-location": [
      "off"
    ],
    "react/jsx-curly-newline": [
      "error",
      {
        "multiline": "require",
        "singleline": "consistent"
      }
    ],
    "react/jsx-curly-spacing": [
      "error",
      {
        "when": "never",
        "children": true,
        "allowMultiline": true
      }
    ],
    "react/jsx-equals-spacing": [
      2,
      "never"
    ],
    "react/jsx-filename-extension": [
      "error",
      {
        "extensions": [
          ".tsx"
        ]
      }
    ],
    "react/jsx-first-prop-new-line": [
      "error",
      "multiline-multiprop"
    ],
    "react/jsx-fragments": [
      "error",
      "syntax"
    ],
    "react/jsx-indent": [
      "error",
      "tab",
      {
        "checkAttributes": false,
        "indentLogicalExpressions": false
      }
    ],
    "react/jsx-indent-props": [
      "error",
      {
        "indentMode": "tab",
        "ignoreTernaryOperator": true
      }
    ],
    "react/jsx-max-depth": [
      "off"
    ],
    "react/jsx-max-props-per-line": [
      "off"
    ],
    "react/jsx-newline": [
      "error",
      {
        "prevent": true,
        "allowMultilines": false
      }
    ],
    "react/jsx-no-constructed-context-values": [
      "error"
    ],
    "react/jsx-no-leaked-render": [
      "error",
      {
        "validStrategies": [
          "ternary"
        ]
      }
    ],
    "react/jsx-no-script-url": [
      "error"
    ],
    "react/jsx-no-useless-fragment": [
      "off"
    ],
    "react/jsx-one-expression-per-line": [
      "off"
    ],
    "react/jsx-pascal-case": [
      "error",
      {
        "allowAllCaps": false,
        "allowLeadingUnderscore": false,
        "allowNamespace": false,
        "ignore": [
          "_"
        ]
      }
    ],
    "react/jsx-props-no-multi-spaces": [
      "error"
    ],
    "react/jsx-tag-spacing": [
      "error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never",
        "beforeClosing": "proportional-always"
      }
    ],
    "react/jsx-wrap-multilines": [
      "error",
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "ignore",
        "logical": "ignore",
        "prop": "ignore"
      }
    ],
    "react/jsx-props-no-spreading": [
      "error",
      {
        "html": "ignore",
        "custom": "enforce",
        "explicitSpread": "ignore",
        "exceptions": []
      }
    ],
    "react/jsx-no-literals": [
      "off"
    ],
    "react/jsx-no-bind": [
      "off"
    ],
    "react/jsx-curly-brace-presence": [
      "error",
      {
        "props": "never",
        "children": "never",
        "propElementValues": "always"
      }
    ],
    "react/no-unstable-nested-components": [
      "error",
      {
        "allowAsProps": true
      }
    ],
    "react/boolean-prop-naming": [
      "off"
    ],
    "react-hooks/rules-of-hooks": [
      "error"
    ],
    "react-hooks/exhaustive-dep": "off",
    "import/order": [
      "error",
      {
        "pathGroups": [
          {
            "pattern": "./components/**",
            "group": "internal",
            "position": "after"
          },
          {
            "pattern": "./hooks/**",
            "group": "internal",
            "position": "after"
          },
          {
            "pattern": "./utils/**",
            "group": "internal",
            "position": "after"
          },
          {
            "pattern": "./**",
            "group": "internal",
            "position": "after"
          }
        ],
        "pathGroupsExcludedImportTypes": [
          "builtin"
        ],
        "newlines-between": "always"
      }
    ]
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
      "typescript": {
        "extensions": [
          ".ts",
          ".tsx"
        ],
        "moduleDirectory": [
          "src",
          "node_modules"
        ]
      }
    },
    "react": {
      "version": "detect"
    }
  }
}
